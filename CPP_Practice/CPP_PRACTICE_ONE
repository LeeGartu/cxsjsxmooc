{"test_title": "024:数字反转", "test_describe": "给定一个整数，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零（参见样例2）。\r\n", "test_input": "输入共 1 行，一个整数N。", "test_output": "输出共 1 行，一个整数，表示反转后的新数。", "demo_input": "样例 #1：\r\n123\r\n\r\n样例 #2：\r\n-380", "demo_output": "样例 #1：\r\n321\r\n\r\n样例 #2：\r\n-83"}
{"test_title": "020:乘方计算", "test_describe": "给出一个整数a和一个正整数n，求乘方a", "test_input": "一行，包含两个整数a和n。-1000000 <= a <= 1000000，1 <= n <= 10000。", "test_output": "一个整数，即乘方结果。题目保证最终结果的绝对值不超过1000000。", "demo_input": "2 3", "demo_output": "8"}
{"test_title": "021:鸡尾酒疗法", "test_describe": "鸡尾酒疗法，原指“高效抗逆转录病毒治疗”（HAART），由美籍华裔科学家何大一于1996年提出，是通过三种或三种以上的抗病毒药物联合使用来治疗艾\r\n滋病。该疗法的应用可以减少单一用药产生的抗药性，最大限度地抑制病毒的复制，使被破坏的机体免疫功能部分甚至全部恢复，从而延缓病程进展，延长患者生\r\n命，提高生活质量。人们在鸡尾酒疗法的基础上又提出了很多种改进的疗法。为了验证这些治疗方法是否在疗效上比鸡尾酒疗法更好，可用通过临床对照实验的方式\r\n进行。假设鸡尾酒疗法的有效率为x，新疗法的有效率为y，如果y-x大于5%，则效果更好，如果x-y大于5%，则效果更差，否则称为效果差不多。下面给\r\n出n组临床对照实验，其中第一组采用鸡尾酒疗法，其他n-1组为各种不同的改进疗法。请写程序判定各种改进疗法效果如何。", "test_input": "第一行为整数n（ 1 < n <= 20）；", "test_output": "有n-1行输出，分别表示对应改进疗法的效果：", "demo_input": "5\r\n125 99\r\n112 89\r\n145 99\r\n99 97\r\n123 98", "demo_output": "same\r\nworse\r\nbetter\r\nsame"}
{"test_title": "017:求整数的和与均值", "test_describe": "读入n（1 <= n <= 10000）个整数，求它们的和与均值。", "test_input": "输入第一行是一个整数n，表示有n个整数。", "test_output": "输出一行，先输出和，再输出平均值（保留到小数点后5位），两个数间用单个空格分隔。", "demo_input": "4\r\n344\r\n222\r\n343\r\n222", "demo_output": "1131 282.75000"}
{"test_title": "016:简单计算器", "test_describe": "一个最简单的计算器，支持+, -, *, / 四种运算。仅需考虑输入输出为整数的情况，数据和运算结果不会超过int表示的范围。", "test_input": "输入只有一行，共有三个参数，其中第1、2个参数为整数，第3个参数为操作符（+,-,*,/）。", "test_output": "输出只有一行，一个整数，为运算结果。然而：", "demo_input": "1 2 +", "demo_output": "3"}
{"test_title": "015:苹果和虫子2", "test_describe": null, "test_input": "输入仅一行，包括n，x和y（均为整数）。", "test_output": "输出也仅一行，剩下的苹果个数", "demo_input": "10 4 9", "demo_output": "7"}
{"test_title": "014:点和正方形的关系", "test_describe": null, "test_input": "输入一行，包括两个整数x、y，以一个空格分开，表示坐标(x,y)。", "test_output": "输出一行，如果点在正方形内，则输出yes，否则输出no。", "demo_input": "1 1", "demo_output": "yes"}
{"test_title": "019:奥运奖牌计数", "test_describe": "2008年北京奥运会，A国的运动员参与了n天的决赛项目(1≤n≤17)。现在要统计一下A国所获得的金、银、铜牌数目及总奖牌数。", "test_input": "输入n＋1行，第1行是A国参与决赛项目的天数n，其后n行，每一行是该国某一天获得的金、银、铜牌数目，以一个空格分开。", "test_output": "输出1行，包括4个整数，为A国所获得的金、银、铜牌总数及总奖牌数，以一个空格分开。", "demo_input": "3\r\n1 0 3\r\n3 1 0\r\n0 3 0", "demo_output": "4 4 3 11"}
{"test_title": "012:奇偶数判断", "test_describe": null, "test_input": "输入仅一行，一个大于零的正整数n。", "test_output": "输出仅一行，如果n是奇数，输出odd；如果n是偶数，输出even。", "demo_input": "5", "demo_output": "odd"}
{"test_title": "010:计算球的体积", "test_describe": "对于半径为r的球，其体积的计算公式为", "test_input": "输入为一个不超过100的非负实数，即球半径，类型为double。", "test_output": "输出一个实数，即球的体积，保留到小数点后2位。", "demo_input": "4", "demo_output": "267.95"}
{"test_title": "013:求一元二次方程的根", "test_describe": null, "test_input": "输入一行，包含三个浮点数a, b, c（它们之间以一个空格分开），分别表示方程ax", "test_output": "输出一行，表示方程的解。", "demo_input": "样例输入1\r\n1.0 2.0 8.0\r\n\r\n样例输入2\r\n1 0 1", "demo_output": "样例输出1\r\nx1=-1.00000+2.64575i;x2=-1.00000-2.64575i\r\n\r\n样例输出2\r\nx1=0.00000+1.00000i;x2=0.00000-1.00000i"}
{"test_title": "022:角谷猜想", "test_describe": null, "test_input": "一个正整数N(N <= 2,000,000)", "test_output": "从输入整数到1的步骤，每一步为一行，每一部中描述计算过程。最后一行输出\"End\"。如果输入为1，直接输出\"End\"。", "demo_input": "5", "demo_output": "5*3+1=16\n16/2=8\n8/2=4\n4/2=2\n2/2=1\nEnd"}
{"test_title": "018:整数序列的元素最大跨度值", "test_describe": null, "test_input": "一共2行，第一行为序列的个数n（1 <= n <= 1000)，第二行为序列的n个不超过1000的非负整数，整数之间以一个空格分隔。", "test_output": "输出一行，表示序列的最大跨度值。", "demo_input": "6\r\n3 0 8 7 5 9", "demo_output": "9"}
{"test_title": "023:正常血压", "test_describe": "监护室每小时测量一次病人的血压，若收缩压在90 - 140之间并且舒张压在60 - 90之间（包含端点值）则称之为正常，现给出某病人若干次测量的血压值，计算病人保持正常血压的最长小时数。", "test_input": "第一行为一个正整数n，n < 100", "test_output": "输出仅一行，血压连续正常的最长小时数。", "demo_input": "4\r\n100 80\r\n90 50\r\n120 60\r\n140 90", "demo_output": "2"}
{"test_title": "011:大象喝水", "test_describe": "一只大象口渴了，要喝20升水才能解渴，但现在只有一个深h厘米，底面半径为r厘米的小圆桶(h和r都是整数)。问大象至少要喝多少桶水才会解渴。", "test_input": "输入有一行：包行两个整数，以一个空格分开，分别表示小圆桶的深h和底面半径r，单位都是厘米。", "test_output": "输出一行，包含一个整数，表示大象至少要喝水的桶数。", "demo_input": "23 11", "demo_output": "3"}
{"test_title": "066:冷血格斗场", "test_describe": "为了迎接08年的奥运会，让大家更加了解各种格斗运动，facer新开了一家冷血格斗场。格斗场实行会员制，但是新来的会员不需要交入会费，而只要同一名老会员打一场表演赛，证明自己的实力。", "test_input": null, "test_output": null, "demo_input": "3\r\n2 3\r\n3 1\r\n4 2", "demo_output": "2 1\r\n3 2\r\n4 2"}
{"test_title": "065:热血格斗场", "test_describe": "为了迎接08年的奥运会，让大家更加了解各种格斗运动，facer新开了一家热血格斗场。格斗场实行会员制，但是新来的会员不需要交入会费，而只要同一名老会员打一场表演赛，证明自己的实力。", "test_input": null, "test_output": null, "demo_input": "3\r\n2 1\r\n3 3\r\n4 2", "demo_output": "2 1\r\n3 2\r\n4 2"}
{"test_title": "061:Aggressive cows", "test_describe": null, "test_input": "* Line 1: Two space-separated integers: N and C", "test_output": "* Line 1: One integer: the largest minimum distance", "demo_input": "5 3\r\n1\r\n2\r\n8\r\n4\r\n9", "demo_output": "3"}
{"test_title": "009:空格分隔输出", "test_describe": "读入一个字符，一个整数，一个单精度浮点数，一个双精度浮点数，然后按顺序输出它们，并且要求在他们之间用一个空格分隔。输出浮点数时保留6位小数。", "test_input": "共有四行：", "test_output": "输出字符、整数、单精度浮点数和双精度浮点数，之间用空格分隔。", "demo_input": "a\r\n12\r\n2.3\r\n3.2", "demo_output": "a 12 2.300000 3.200000"}
{"test_title": "060:月度开销", "test_describe": "农夫约翰是一个精明的会计师。他意识到自己可能没有足够的钱来维持农场的运转了。他计算出并记录下了接下来 ", "test_input": "第一行包含两个整数N,M，用单个空格隔开。", "test_output": "一个整数，即最大月度开销的最小值。", "demo_input": "7 5\r\n100\r\n400\r\n300\r\n100\r\n500\r\n101\r\n400", "demo_output": "500"}
{"test_title": "059:派", "test_describe": "我的朋友们都特别小气，如果有人拿到更大的一块，就会开始抱怨。因此所有人拿到的派是同样大小的（但不需要是同样形状的），虽然这样有些派会被浪费，但总比搞砸整个派对好。当然，我也要给自己留一块，而这一块也要和其他人的同样大小。", "test_input": "第一行包含两个正整数N和F，1 ≤ N, F ≤ 10 000，表示派的数量和朋友的数量。", "test_output": "输出每个人能得到的最大的派的体积，精确到小数点后三位。", "demo_input": "3 3\r\n4 3 3", "demo_output": "25.133"}
{"test_title": "058:从字符串中取数", "test_describe": "编写GetDoubleFromString函数，该函数可以不断从字符串中取出正浮点数或整数，无数可取，则返回值小于0", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "057:mysort", "test_describe": "程序填空题，自己编写排序函数 mysort，使得其能够对任意类型的数组排序", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "055:分数线划定", "test_describe": "世博会志愿者的选拔工作正在 A 市如火如荼的进行。为了选拔最合适的人才，A市对所有报名的选手进行了笔试，笔试分数达到面试分数线的选手方可进入面试。面试分数线根据计划录取人数的150%划定，即如果计划录取m名志愿者，则面试分数线为排名第m*150%（向下取整）名的选手的分数，而最终进入面试的选手为笔试成绩不低于面试分数线的所有选手。", "test_input": "第一行，两个整数n，m（5 ≤ n ≤ 5000，3 ≤ m ≤ n），中间用一个空格隔开，其中n 表示报名参加笔试的选手总数，m 表示计划录取的志愿者人数。输入数据保证m*150%向下取整后小于等于n。", "test_output": "第一行，有两个整数，用一个空格隔开，第一个整数表示面试分数线；第二个整数为进入面试的选手的实际人数。", "demo_input": "6 3\r\n1000 90\r\n3239 88\r\n2390 95\r\n7231 84\r\n1005 95\r\n1001 88\r\n", "demo_output": "88 5\r\n1005 95\r\n2390 95\r\n1000 90\r\n1001 88\r\n3239 88\r\n"}
{"test_title": "063:还是sort简单题", "test_describe": "程序填空，产生指定输出结果", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "062:sort简单题", "test_describe": "程序填空，产生指定输出结果", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "051:指针练习：MyMax", "test_describe": null, "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "056:病人排队", "test_describe": "病人登记看病，编写一个程序，将登记的病人按照以下原则排出看病的先后顺序：\r\n", "test_input": "第1行，输入一个小于100的正整数，表示病人的个数；", "test_output": "按排好的看病顺序输出病人的ID，每行一个。", "demo_input": "5\r\n021075 40\r\n004003 15\r\n010158 67\r\n021033 75\r\n102012 30", "demo_output": "021033\r\n010158\r\n021075\r\n004003\r\n102012"}
{"test_title": "053:指针练习：SwapMemory", "test_describe": "填写内存交换函数 SwapMemory，使得程序输出指定结果", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "064:Set", "test_describe": null, "test_input": "第一行是一个整数n，表示命令数。0<=n<=100000。", "test_output": "共n行，每行按要求输出。", "demo_input": "7\nadd 1\nadd 1\nask 1\nask 2\ndel 2\ndel 1\nask 1", "demo_output": "1\n2\n1 2\n0 0\n0\n2\n1 0"}
{"test_title": "052:指针练习：指向指针的指针", "test_describe": "程序填空使得输出指定结果", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "046:指针练习:输出Tesla", "test_describe": null, "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "047:指针练习：ForEach", "test_describe": "程序填空，使得输出结果为： ", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "054:成绩排序", "test_describe": "给出班里某门课程的成绩单，请你按成绩从高到低对成绩单排序输出，如果有相同分数则名字字典序小的在前。", "test_input": "第一行为n (0 < n < 20)，表示班里的学生数目；", "test_output": "把成绩单按分数从高到低的顺序进行排序并输出，每行包含名字和分数两项，之间有一个空格。", "demo_input": "4\r\nKitty 80\r\nHanmeimei 90\r\nJoey 92\r\nTim 28", "demo_output": "Joey 92\r\nHanmeimei 90 \r\nKitty 80\r\nTim 28"}
{"test_title": "043:最长最短单词", "test_describe": "输入1行句子（不多于200个单词，每个单词长度不超过100），只包含字母、空格和逗号。单词由至少一个连续的字母构成，空格和逗号都是单词间的间隔。", "test_input": "一行句子。", "test_output": "两行输出：", "demo_input": "I am studying Programming language C in Peking University", "demo_output": "Programming\r\nI"}
{"test_title": "042:石头剪子布", "test_describe": "石头剪子布，是一种猜拳游戏。起源于中国，然后传到日本、朝鲜等地，随着亚欧贸易的不断发展它传到了欧洲，到了近现代逐渐风靡世界。简单明了的规则，使得石头剪子布没有任何规则漏洞可钻，单次玩法比拼运气，多回合玩法比拼心理博弈，使得石头剪子布这个古老的游戏同时用于“意外”与“技术”两种特性，深受世界人民喜爱。\r\n", "test_input": "输入包括N+1行：", "test_output": "输出包括N行，每一行对应一个胜利者（Player1或者Player2），或者游戏出现平局，则输出Tie。", "demo_input": "3\r\nRock Scissors\r\nPaper Paper\r\nRock Paper", "demo_output": "Player1\r\nTie\r\nPlayer2"}
{"test_title": "041:找第一个只出现一次的字符", "test_describe": null, "test_input": "一个字符串，长度小于100000。", "test_output": "输出第一个仅出现一次的字符，若没有则输出no。", "demo_input": "abcabd", "demo_output": "c"}
{"test_title": "045:指针练习：输出Hello", "test_describe": "下面程序片段的输出结果是 Hello ,请填空", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "039:编程填空：左边i位取反", "test_describe": "请使用【", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "048:指针练习：Memcpy之一", "test_describe": "程序填空，使得程序按要求输出", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "038:编程填空：第i位取反", "test_describe": "请使用【", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "037:编程填空：第i位替换", "test_describe": "写出函数中缺失的部分，使得函数返回值为一个整数,该整数的第i位和m的第i位相同，其他位和n相同。", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "040:统计数字字符个数", "test_describe": "输入一行字符，统计出其中数字字符的个数。", "test_input": "一行字符串，总长度不超过255。", "test_output": "输出为1行，输出字符串里面数字字符的个数。", "demo_input": "Peking University is set up at 1898.", "demo_output": "4"}
{"test_title": "050:指针练习：Memcpy之二", "test_describe": "程序填空，使得程序按要求输出", "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "035:Pell数列", "test_describe": null, "test_input": "第1行是测试数据的组数n，后面跟着n行输入。每组测试数据占1行，包括一个正整数k (1 ≤ k < 1000000)。", "test_output": "n行，每行输出对应一个输入。输出应是一个非负整数。", "demo_input": "2\r\n1\r\n8\r\n", "demo_output": "1\r\n408\r\n"}
{"test_title": "034:矩阵转置", "test_describe": "输入一个n行m列的矩阵A，输出它的转置A", "test_input": "第一行包含两个整数n和m，表示矩阵A的行数和列数。1 <= n <= 100，1 <= m <= 100。", "test_output": "m行，每行n个整数，为矩阵A的转置。相邻两个整数之间用单个空格隔开。", "demo_input": "3 3\r\n1 2 3\r\n4 5 6\r\n7 8 9\r\n", "demo_output": "1 4 7\r\n2 5 8\r\n3 6 9"}
{"test_title": "036:求最大公约数问题", "test_describe": "给定两个正整数，求它们的最大公约数。", "test_input": "输入一行，包含两个正整数(<1,000,000,000)。", "test_output": "输出一个正整数，即这两个正整数的最大公约数。", "demo_input": "6 9", "demo_output": "3"}
{"test_title": "031:校门外的树", "test_describe": "某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；数轴上的每个整数点，即0，1，2，……，L，都种有一棵树。", "test_input": "第一行有两个整数L（1 <= L <= 10000）和 M（1 <= M <= 100），L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标。", "test_output": "包括一行，这一行只包含一个整数，表示马路上剩余的树的数目。", "demo_input": "500 3\r\n150 300\r\n100 200\r\n470 471\r\n", "demo_output": "298"}
{"test_title": "030:年龄与疾病", "test_describe": null, "test_input": "共2行，第一行为过往病人的数目n（0 < n <= 100)，第二行为每个病人患病时的年龄。", "test_output": "按照0-18、19-35、36-60、61以上（含61）四个年龄段输出该段患病人数占总患病人数的比例，以百分比的形式输出，精确到小数点后两位。每个年龄段占一行，共四行。", "demo_input": "10\n1 11 21 31 41 51 61 71 81 91", "demo_output": "20.00%\n20.00%\n20.00%\n40.00%"}
{"test_title": "029:陶陶摘苹果", "test_describe": "陶陶家的院子里有一棵苹果树，每到秋天树上就会结出10个苹果。苹果成熟的时候，陶陶就会跑去摘苹果。陶陶有个30厘米高的板凳，当她不能直接用手摘到苹果的时候，就会踩到板凳上再试试。", "test_input": "包括两行数据。第一行包含10个100到200之间（包括100和200）的整数（以厘米为单位）分别表示10个苹果到地面的高度，两个相邻的整数之间用一个空格隔开。第二行只包括一个100到120之间（包含100和120）的整数（以厘米为单位），表示陶陶把手伸直的时候能够达到的最大高度。", "test_output": "包括一行，这一行只包含一个整数，表示陶陶能够摘到的苹果的数目。", "demo_input": "100 200 150 140 129 134 167 198 200 111\r\n110\r\n", "demo_output": "5"}
{"test_title": "028:与指定数字相同的数的个数", "test_describe": "输出一个整数序列中与指定数字相同的数的个数。", "test_input": "输入包含三行：", "test_output": "输出为N个数中与m相同的数的个数。", "demo_input": "3\r\n2 3 2\r\n2", "demo_output": "2"}
{"test_title": "026:雇佣兵", "test_describe": null, "test_input": "一行包括三个整数M、N、X，相邻两个整数之间用单个空格隔开。M、N、X均为不超过10000的正整数。", "test_output": "输出一个整数，为雇佣兵的最大战斗力。", "demo_input": "5 2 10", "demo_output": "6"}
{"test_title": "044:密码翻译", "test_describe": null, "test_input": "输入一行，包含一个字符串，长度小于80个字符。", "test_output": "输出每行字符串的加密字符串。", "demo_input": "Hello! How are you!", "demo_output": "Ifmmp! Ipx bsf zpv!"}
{"test_title": "033:图像模糊处理", "test_describe": "给定n行m列的图像各像素点的灰度值，要求用如下方法对其进行模糊化处理：", "test_input": "第一行包含两个整数n和m，表示图像包含像素点的行数和列数。1 <= n <= 100，1 <= m <= 100。", "test_output": "n行，每行m个整数，为模糊处理后的图像。相邻两个整数之间用单个空格隔开。", "demo_input": "4 5\r\n100 0 100 0 50\r\n50 100 200 0 0\r\n50 50 100 100 200\r\n100 100 50 50 100", "demo_output": "100 0 100 0 50\r\n50 80 100 60 0\r\n50 80 100 90 200\r\n100 100 50 50 100"}
{"test_title": "007:对齐输出", "test_describe": "读入三个整数，按每个整数占8个字符的宽度，右对齐输出它们。", "test_input": "只有一行，包含三个整数，整数之间以一个空格分开。", "test_output": "只有一行，按照格式要求依次输出三个整数，之间以一个空格分开。", "demo_input": "123456789 0 -1", "demo_output": "123456789        0       -1"}
{"test_title": "025:求特殊自然数", "test_describe": null, "test_input": "无。", "test_output": "三行：", "demo_input": "（无）", "demo_output": "（不提供）"}
{"test_title": "005:整型数据类型存储空间大小", "test_describe": "分别定义int，short类型的变量各一个，并依次输出它们的存储空间大小（单位：字节）。", "test_input": "无。", "test_output": "一行，两个整数，分别是两个变量的存储空间大小，用一个空格隔开。", "demo_input": "（无）", "demo_output": "（不提供）"}
{"test_title": "032:计算鞍点", "test_describe": "给定一个5*5的矩阵，每行只有一个最大值，每列只有一个最小值，寻找这个矩阵的鞍点。", "test_input": "输入包含一个5行5列的矩阵", "test_output": "如果存在鞍点，输出鞍点所在的行、列及其值，如果不存在，输出\"not found\"", "demo_input": "11 3 5 6 9\r\n12 4 7 8 10\r\n10 5 6 9 11\r\n8  6 4 7 2\r\n15 10 11 20 25", "demo_output": "4 1 8"}
{"test_title": "004:打印字符", "test_describe": "输入一个ASCII码，输出对应的字符。", "test_input": "一个整数，即字符的ASCII码，保证存在对应的可见字符。", "test_output": "一行，包含相应的字符。", "demo_input": "65", "demo_output": "A"}
{"test_title": "003:打印ASCII码", "test_describe": "输入一个除空格以外的可见字符（保证在函数scanf中可使用格式说明符%c读入），输出其ASCII码。", "test_input": "一个除空格以外的可见字符。", "test_output": "一个十进制整数，即该字符的ASCII码。", "demo_input": "A", "demo_output": "65"}
{"test_title": "008:输出保留12位小数的浮点数", "test_describe": "读入一个双精度浮点数，保留12位小数，输出这个浮点数。", "test_input": "只有一行，一个双精度浮点数。", "test_output": "也只有一行，保留12位小数的浮点数。", "demo_input": "3.1415926535798932", "demo_output": "3.141592653580"}
{"test_title": "002:字符菱形", "test_describe": null, "test_input": "输入只有一行， 包含一个字符。", "test_output": "该字符构成的菱形。", "demo_input": "*", "demo_output": "  *\r\n ***\r\n*****\r\n ***\r\n  *"}
{"test_title": "027:数字统计", "test_describe": "请统计某个给定范围[L, R]的所有整数中，数字2出现的次数。", "test_input": "输入共 1 行，为两个正整数 L 和 R，之间用一个空格隔开。", "test_output": "输出共 1 行，表示数字 2 出现的次数。", "demo_input": "样例 #1：\r\n2 22\r\n\r\n样例 #2：\r\n2 100", "demo_output": "样例 #1：\r\n6\r\n\r\n样例 #2：\r\n20"}
{"test_title": "049:指针练习：double", "test_describe": null, "test_input": null, "test_output": null, "demo_input": null, "demo_output": null}
{"test_title": "001:输出第二个整数", "test_describe": "输入三个整数，把第二个输入的整数输出。", "test_input": "只有一行，共三个整数，整数之间由一个空格分隔。整数是32位有符号整数。", "test_output": "只有一行，一个整数，即输入的第二个整数。", "demo_input": "123 456 789", "demo_output": "456"}
{"test_title": "006:浮点型数据类型存储空间大小", "test_describe": "分别定义float，double类型的变量各一个，并依次输出它们的存储空间大小（单位：字节）。", "test_input": "无。", "test_output": "一行，两个整数，分别是两个变量的存储空间大小，用一个空格隔开。", "demo_input": "（无）", "demo_output": "（不提供）"}
